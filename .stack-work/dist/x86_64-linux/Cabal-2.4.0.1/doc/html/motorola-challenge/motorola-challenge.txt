-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/marius-cristian/motorola-challenge#readme</a>
@package motorola-challenge
@version 0.1.0.0


-- | The module exposes a datatype for a Configuration file. The file must
--   be in JSON format. If the file does not exist the module will cause a
--   runtime exception and crash the program. Thus be sure that :set args
--   is set to prod or dev, and the json file exists in the system path
--   .<i>src</i>config/cofnig.json for dev.
module Config

-- | Configuration data type
data Configuration
Configuration :: Text -> String -> String -> String -> Configuration
[dbName] :: Configuration -> Text
[dbUrl] :: Configuration -> String
[dbUser] :: Configuration -> String
[dbPassword] :: Configuration -> String

configuration :: IO (Maybe Configuration)
instance GHC.Generics.Generic Config.Configuration
instance GHC.Show.Show Config.Configuration
instance Data.Aeson.Types.FromJSON.FromJSON Config.Configuration


-- | This module exposes type aliases for our reader monad that holds
--   information such as db connection pool, configuration file, (maybe
--   logger, etc.), and the monad transformers associated with it.
module Environment


-- | This module exposes methods for creating a mongo connection pool, and
--   for running actions against the db.
module MongoUtils

-- | Mongo must run
localPipe :: IO Pipe

-- | General pipe, can connect to local instance or to a cluster db
getPipe :: Configuration -> IO Pipe

-- | Connection pool
getPool :: Configuration -> IO (Pool Pipe)

-- | Run a querry against the db
run :: Action IO a -> MotoTransformer a

-- | helper to convert from DOC to appropriate Type
fromDoc :: FromBSON a => Document -> Maybe a


-- | This module populates the reader monad with the config file and db
--   connection pool
module CreateEnvironment

-- | Creates an environment.
createEnvironment :: IO Environment

module Types
data Device
Device :: Integer -> String -> Maybe String -> [String] -> Device
[radioId] :: Device -> Integer
[name] :: Device -> String
[loc] :: Device -> Maybe String
[allowed] :: Device -> [String]
data Payload
Payload :: String -> [String] -> Payload
[alias] :: Payload -> String
[allowed_locations] :: Payload -> [String]
data Location
Location :: String -> Location
[location] :: Location -> String
instance GHC.Show.Show Types.Location
instance GHC.Generics.Generic Types.Location
instance GHC.Show.Show Types.Payload
instance GHC.Generics.Generic Types.Payload
instance GHC.Show.Show Types.Device
instance GHC.Generics.Generic Types.Device
instance Data.Aeson.Types.FromJSON.FromJSON Types.Location
instance Data.Aeson.Types.ToJSON.ToJSON Types.Location
instance Data.Aeson.Types.FromJSON.FromJSON Types.Payload
instance Data.Aeson.Types.ToJSON.ToJSON Types.Payload
instance Data.Aeson.Types.ToJSON.ToJSON Types.Device
instance Data.Bson.Generic.ToBSON Types.Device
instance Data.Bson.Generic.FromBSON Types.Device
instance Data.Aeson.Types.FromJSON.FromJSON Types.Device


-- | Insertion of new devices: id is unique Update of location if its in
--   the list of allowed location Retrieval of a locaiton
module DeviceApi


-- | This module exposes a method for starting the rest endpoint
module Rest

-- | route for base endpoint
apiRoot :: String

-- | Deserialize data from json string "{object}" to the appropriate data
--   type
withJsonData :: FromJSON p => (p -> MotoTransformer a) -> ActionTransformer a

-- | Deserialize data from just param to the appropriate dataType
withStringParam :: Text -> (String -> MotoTransformer a) -> ActionTransformer a

module Lib
startServer :: IO ()
